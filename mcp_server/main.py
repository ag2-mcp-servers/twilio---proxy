# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T11:10:47+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, HTTPBasic
from fastapi import Path, Query
from pydantic import conint, constr
from starlette.requests import Request

from models import (
    ProxyV1Service,
    ProxyV1ServicePhoneNumber,
    ProxyV1ServiceSession,
    ProxyV1ServiceSessionInteraction,
    ProxyV1ServiceSessionParticipant,
    ProxyV1ServiceSessionParticipantMessageInteraction,
    ProxyV1ServiceShortCode,
    V1ServicesGetResponse,
    V1ServicesServiceSidPhoneNumbersGetResponse,
    V1ServicesServiceSidSessionsGetResponse,
    V1ServicesServiceSidSessionsSessionSidInteractionsGetResponse,
    V1ServicesServiceSidSessionsSessionSidParticipantsGetResponse,
    V1ServicesServiceSidSessionsSessionSidParticipantsParticipantSidMessageInteractionsGetResponse,
    V1ServicesServiceSidShortCodesGetResponse,
)

app = MCPProxy(
    contact={
        'email': 'support@twilio.com',
        'name': 'Twilio Support',
        'url': 'https://support.twilio.com',
    },
    description='This is the public Twilio REST API.',
    license={
        'name': 'Apache 2.0',
        'url': 'https://www.apache.org/licenses/LICENSE-2.0.html',
    },
    termsOfService='https://www.twilio.com/legal/tos',
    title='Twilio - Proxy',
    version='1.42.0',
    servers=[{'url': 'https://proxy.twilio.com'}],
)


@app.get(
    '/v1/Services',
    description=""" Retrieve a list of all Services for Twilio Proxy. A maximum of 100 records will be returned per page. """,
    tags=['service_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_service(
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/Services',
    description=""" Create a new Service for Twilio Proxy """,
    tags=['service_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_service(request: Request):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Services/{ServiceSid}/PhoneNumbers',
    description=""" Retrieve a list of all Phone Numbers in the Proxy Number Pool for a Service. A maximum of 100 records will be returned per page. """,
    tags=['service_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_phone_number(
    service_sid: constr(
        pattern=r'^KS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/Services/{ServiceSid}/PhoneNumbers',
    description=""" Add a Phone Number to a Service's Proxy Number Pool. """,
    tags=['service_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_phone_number(
    service_sid: constr(
        pattern=r'^KS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v1/Services/{ServiceSid}/PhoneNumbers/{Sid}',
    description=""" Delete a specific Phone Number from a Service. """,
    tags=['service_operations', 'phone_number_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_phone_number(
    service_sid: constr(
        pattern=r'^KS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    sid: constr(pattern=r'^PN[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Services/{ServiceSid}/PhoneNumbers/{Sid}',
    description=""" Fetch a specific Phone Number. """,
    tags=['service_operations', 'phone_number_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_phone_number(
    service_sid: constr(
        pattern=r'^KS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    sid: constr(pattern=r'^PN[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/Services/{ServiceSid}/PhoneNumbers/{Sid}',
    description=""" Update a specific Proxy Number. """,
    tags=['service_operations', 'phone_number_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_phone_number(
    service_sid: constr(
        pattern=r'^KS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    sid: constr(pattern=r'^PN[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Services/{ServiceSid}/Sessions',
    description=""" Retrieve a list of all Sessions for the Service. A maximum of 100 records will be returned per page. """,
    tags=['service_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_session(
    service_sid: constr(
        pattern=r'^KS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/Services/{ServiceSid}/Sessions',
    description=""" Create a new Session """,
    tags=['service_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_session(
    service_sid: constr(
        pattern=r'^KS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Interactions',
    description=""" Retrieve a list of all Interactions for a Session. A maximum of 100 records will be returned per page. """,
    tags=['session_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_interaction(
    service_sid: constr(
        pattern=r'^KS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    session_sid: constr(
        pattern=r'^KC[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='SessionSid'),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Interactions/{Sid}',
    description=""" Delete a specific Interaction. """,
    tags=['session_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_interaction(
    service_sid: constr(
        pattern=r'^KS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    session_sid: constr(
        pattern=r'^KC[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='SessionSid'),
    sid: constr(pattern=r'^KI[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Interactions/{Sid}',
    description=""" Retrieve a list of Interactions for a given [Session](https://www.twilio.com/docs/proxy/api/session). """,
    tags=['session_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_interaction(
    service_sid: constr(
        pattern=r'^KS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    session_sid: constr(
        pattern=r'^KC[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='SessionSid'),
    sid: constr(pattern=r'^KI[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Participants',
    description=""" Retrieve a list of all Participants in a Session. """,
    tags=['service_operations', 'session_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_participant(
    service_sid: constr(
        pattern=r'^KS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    session_sid: constr(
        pattern=r'^KC[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='SessionSid'),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Participants',
    description=""" Add a new Participant to the Session """,
    tags=['session_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_participant(
    service_sid: constr(
        pattern=r'^KS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    session_sid: constr(
        pattern=r'^KC[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='SessionSid'),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Participants/{ParticipantSid}/MessageInteractions',
    tags=['session_operations', 'participant_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_message_interaction(
    service_sid: constr(
        pattern=r'^KS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    session_sid: constr(
        pattern=r'^KC[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='SessionSid'),
    participant_sid: constr(
        pattern=r'^KP[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ParticipantSid'),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Participants/{ParticipantSid}/MessageInteractions',
    description=""" Create a new message Interaction to send directly from your system to one [Participant](https://www.twilio.com/docs/proxy/api/participant).  The `inbound` properties for the Interaction will always be empty. """,
    tags=['session_operations', 'participant_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_message_interaction(
    service_sid: constr(
        pattern=r'^KS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    session_sid: constr(
        pattern=r'^KC[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='SessionSid'),
    participant_sid: constr(
        pattern=r'^KP[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ParticipantSid'),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Participants/{ParticipantSid}/MessageInteractions/{Sid}',
    tags=['session_operations', 'participant_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_message_interaction(
    service_sid: constr(
        pattern=r'^KS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    session_sid: constr(
        pattern=r'^KC[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='SessionSid'),
    participant_sid: constr(
        pattern=r'^KP[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ParticipantSid'),
    sid: constr(pattern=r'^KI[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Participants/{Sid}',
    description=""" Delete a specific Participant. This is a soft-delete. The participant remains associated with the session and cannot be re-added. Participants are only permanently deleted when the [Session](https://www.twilio.com/docs/proxy/api/session) is deleted. """,
    tags=['session_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_participant(
    service_sid: constr(
        pattern=r'^KS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    session_sid: constr(
        pattern=r'^KC[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='SessionSid'),
    sid: constr(pattern=r'^KP[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Participants/{Sid}',
    description=""" Fetch a specific Participant. """,
    tags=['session_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_participant(
    service_sid: constr(
        pattern=r'^KS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    session_sid: constr(
        pattern=r'^KC[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='SessionSid'),
    sid: constr(pattern=r'^KP[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v1/Services/{ServiceSid}/Sessions/{Sid}',
    description=""" Delete a specific Session. """,
    tags=['service_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_session(
    service_sid: constr(
        pattern=r'^KS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    sid: constr(pattern=r'^KC[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Services/{ServiceSid}/Sessions/{Sid}',
    description=""" Fetch a specific Session. """,
    tags=['service_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_session(
    service_sid: constr(
        pattern=r'^KS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    sid: str = Path(..., alias='Sid'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/Services/{ServiceSid}/Sessions/{Sid}',
    description=""" Update a specific Session. """,
    tags=['service_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_session(
    service_sid: constr(
        pattern=r'^KS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    sid: constr(pattern=r'^KC[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Services/{ServiceSid}/ShortCodes',
    description=""" Retrieve a list of all Short Codes in the Proxy Number Pool for the Service. A maximum of 100 records will be returned per page. """,
    tags=['service_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_short_code(
    service_sid: constr(
        pattern=r'^KS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/Services/{ServiceSid}/ShortCodes',
    description=""" Add a Short Code to the Proxy Number Pool for the Service. """,
    tags=['service_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_short_code(
    service_sid: constr(
        pattern=r'^KS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v1/Services/{ServiceSid}/ShortCodes/{Sid}',
    description=""" Delete a specific Short Code from a Service. """,
    tags=['service_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_short_code(
    service_sid: constr(
        pattern=r'^KS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    sid: constr(pattern=r'^SC[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Services/{ServiceSid}/ShortCodes/{Sid}',
    description=""" Fetch a specific Short Code. """,
    tags=['service_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_short_code(
    service_sid: constr(
        pattern=r'^KS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    sid: constr(pattern=r'^SC[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/Services/{ServiceSid}/ShortCodes/{Sid}',
    description=""" Update a specific Short Code. """,
    tags=['service_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_short_code(
    service_sid: constr(
        pattern=r'^KS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    sid: constr(pattern=r'^SC[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v1/Services/{Sid}',
    description=""" Delete a specific Service. """,
    tags=['session_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_service(
    sid: constr(pattern=r'^KS[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    )
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Services/{Sid}',
    description=""" Fetch a specific Service. """,
    tags=['session_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_service(sid: str = Path(..., alias='Sid')):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/Services/{Sid}',
    description=""" Update a specific Service. """,
    tags=['session_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_service(
    sid: constr(pattern=r'^KS[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
